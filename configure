#!/usr/bin/env python

# Copyright CEA (2000-2005)
#
#  This software and supporting documentation were developed by
#      CEA/DSV/SHFJ
#      4 place du General Leclerc
#      91401 Orsay cedex
#      France
#
# This software is governed by the CeCILL license version 2 under 
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the 
# terms of the CeCILL license version 2 as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license version 2 and that you accept its terms.

debug = 0

import sys, os, signal, errno, distutils.spawn, imp, copy, shutil

def pathRSplit( path ):
  split = os.path.split( path )
  result = [ split[ 1 ] ]  
  while split[ 0 ]:
    split = os.path.split( split[ 0 ] )
    result.insert( 0, split[ 1 ] )
  return result
  

def exit_handler( number, frame ):
  sys.exit(errno.EINTR)

signal.signal( signal.SIGINT, exit_handler )

dirSeparator = '/'
makerexec = 'maker'
if sys.platform == 'win32':
        ### how to find path to maker?
        # makerexec = 'maker.py'
        dirSeparator = '\\'

#-----------------------------------------------------------------------------
# Call os.system and check result to throw an exception if a signal occured
def systemChecked( command ):
  status = os.system( command )
  if sys.platform == 'win32':
    return status
  if os.WIFSTOPPED(status):
    os.kill( os.getpid(), os.WSTOPSIG(status) )
  if os.WIFSIGNALED(status):
    os.kill( os.getpid(), os.WTERMSIG(status) )
  return os.WEXITSTATUS(status)

# error message formatting
def warning(message, filename=None, line=None):
        if filename:
                if line:
                        sys.stderr.write(filename + ':' + str(line) + ': ' + message + '\n')
                else:
                        sys.stderr.write(filename + ': ' + message + '\n')
        else:
                sys.stderr.write(os.path.basename(sys.argv[0]) + ': ' + message + '\n')


#           +---------------------+
#           |        VPATH        |
#           |                     |
#           |    +-----------+    |
#           |    |           |    |
#           |    +-----------+    |
#           |       /     \       |
#           |      /       \      |
#           |     /         \     |
#           |    /           \    V
#         +-----------+ +-----------+
#         |     .     | | configure |
#         +-----------+ +-----------+
#
# VPATH is the path from current root build directory to root source directory
vpath = os.path.normpath(os.path.dirname(sys.argv[0]))

# parse command-line options
import getopt, string

s = 'rdngm:c:s:vh'
l = [ 'release', 'debug', 'native', 'gcc', 'maker=', 'compiler=', 'system=', 'binbdir=', 'incbdir=', 'libbdir=', 'binfile=', 
      'incfile=', 'libfile=', 'pyfile=', 'buildMode=', 'verbose', 'help' ]
try:
        optlist, args = getopt.getopt(sys.argv[1:], s, l)
except getopt.error, msg:
        sys.stderr.write(str(msg) + '\n')
        sys.stderr.write('Try `' + os.path.basename(sys.argv[0]) + ' -h\' for more information\n.')
        sys.exit(2)
makeroptions = []
for option, argument in optlist:
        if option == '-r' or option == '--release':
                makeroptions.append( '-r' )
        elif option == '-d' or option == '--debug':
                makeroptions.append( '-d' )
        elif option == '-n' or option == '--native':
                makeroptions.append( '-n' )
        elif option == '--buildMode':
                makeroptions += [ '--buildMode', argument ]
        elif option == '-g' or option == '--gcc':
                makeroptions.append( '-g' )
        elif option == '-m' or option == '--maker':
                makerexec = argument
        elif option == '-c' or option == '--compiler':
                makeroptions += [ '-c', argument ]
        elif option == '-s' or option == '--system':
                makeroptions += [ '-s', argument ]
        elif option in ( '--binbdir', '--incbdir', '--libbdir', '--binfile', '--incfile', '--libfile', '--pyfile' ):
                makeroptions += [ option, argument ]
        elif option == '-v' or option == '--verbose':
                debug = 1
        elif option == '-h' or option == '--help':
                print 'Usage:', os.path.basename(sys.argv[0]), '[options] [vpath]'
                print 'Options:'
                print '  -d, --debug             build a non-optimized target with debugging information'
                print '  -r, --release           build an optimized target without debugging information'
                print '  -n, --native            use the native compiler'
                print '  --buildMode             free build mode name'
                print '  -g, --gcc               use the GNU compiler'
                print '  -m, --maker=<name>      use the specified maker command'
                print '  -c, --compiler=<name>   use the specified compiler'
                print '  -s, --system=<name>     generate a Makefile for this operating system'
                print '      --binbdir=<dir>     specify a target directory for user executables'
                print '      --incbdir=<dir>     specify a directory for header files'
                print '      --libbdir=<dir>     specify a target directory for object code libraries'
                print '      --binfile=<file>    specify an output file to append executables list'
                print '      --incfile=<file>    specify an output file to append libraries headers list'
                print '      --libfile=<file>    specify an output file to append libraries list'
                print '      --pyfile=<file>     specify an output file to append python files/modules list'
                print '  -v, --verbose           verbose output, for debugging'
                print '  -h, -help, --help       print this help, then exit'
                print ''
                print 'Report bugs to http://brainvisa.info/forum/'
                sys.exit(0)
if len(args) > 1:
        warning('Too many arguments (' + str(len(args)) + ')')
        sys.exit(1)
if len(args) > 0:
        vpath = os.path.normpath(args[0])
        if not os.path.isdir(vpath):
                warning('Cannot access ' +  vpath)
                sys.exit(1)


# run maker on all project files under VPATH
if debug:
        print '++ VPATH is ' + vpath


# Create simple Makefile in base target directory
makefile = open( 'Makefile', 'w' )
print >> makefile, '''all:
\tcd src; $(MAKE)
'''
makefile.close()
del makefile

#for file in os.listdir(vpath):
#        if vpath != '.':
#                file = os.path.join(vpath, file)
#        if file[-4:] == '.pro':
#                if vpath != '.':
#                        file = file.replace(vpath + '/', '', 1)
#                        break
#command = maker + ' -t '
#if vpath != '.':
#        command = command + ' -p ' + vpath
#command = command + ' ' + file
#if debug:
#        print '++ ' + command
#output = os.popen(command, 'r')
#target = output.readline()
#output.close()
#
# this is a nasty kludge... find a better way to tell the
# name of the include directory, like the above...
if vpath:
        targetbase = vpath
else:
        targetbase = os.path.pwd()

target = os.path.basename(targetbase)
index = target.rfind('-')
if index > 0:
        target = target[:index]
elif target == 'trunk' or \
  len( filter( lambda x: x in ( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.' ), target ) ) == len( target ):
        # this is another nasty kludge: try to detect svn-like directory tree
        # (the base dir is 'trunk' or a version number)
        # and go up one level to get the project name
        # TODO: there could also be an additional 'branches' level
        target = os.path.basename(os.path.dirname(targetbase))
	print 'svn target:', target
if debug:
        print '++ TARGET is ' + target

# check if maker can be loaded as a module
makerexec2 = os.path.join( os.path.dirname( sys.argv[0] ), makerexec )
if not os.path.exists( makerexec2 ):
  makerexec2 = os.path.join( os.path.dirname( \
    os.path.realpath( sys.argv[0] ) ), makerexec )
if not os.path.exists( makerexec2 ):
  makerexec2 = distutils.spawn.find_executable( makerexec )
if not makerexec2 and sys.platform[:3] == 'win':
  pth = os.getenv( 'PATH' ).split( ';' )
  # print 'looking for', makerexec, 'in', pth
  for i in pth:
    if os.path.exists( os.path.join( i, makerexec ) ):
      makerexec2 = os.path.join( i, makerexec )
# print 'maker:', makerexec2
maker = None
if makerexec2:
  file = open( makerexec2 )
  try:
    maker = imp.load_module( 'maker', file, makerexec2, 
                             ('', 'r', imp.PY_SOURCE) )
    # print 'maker loaded as a module'
  except:
    # print 'maker module loading failed'
    pass
  file.close()
# print 'maker:', maker

# run maker on all project files under VPATH
print 'processing projects:'
stack = [ '' ]
makeroptssave = copy.deepcopy( makeroptions )
for o in ( '--binfile', '--incfile', '--libfile', '--pyfile' ):
  if o in makeroptions:
    # clear executable, headers or library file
    i = makeroptions.index( o ) + 1
    h = makeroptions[ i ]
    if os.path.exists( h ):
      os.unlink( h )

while len(stack):
  relpath = stack.pop()
  source_path = os.path.join( vpath, relpath )
  hold_project = 0
  hold_makefile = 0
  projfile = None
  dirs = []
  for file in os.listdir( source_path ):
    source_file = os.path.join( source_path, file )
    relfile = os.path.join( relpath, file )
    if os.path.isdir( source_file ):
      dirs.append( relfile )
    elif source_file[-4:] == '.pro':
      projfile = ( relfile, source_file )

  if projfile:
    relfile, source_file = projfile
    print source_file
    # create build tree
    if relpath and not os.path.isdir( relpath ):
      os.makedirs( relpath )
    # output Makefile
    makefile = os.path.join( relpath, 'Makefile' )
    # run maker
    makeroptions = copy.deepcopy( makeroptssave )
    makefileRelativeMainPath = apply( os.path.join, [ '..' ] * len( pathRSplit( relpath ) ) )
    if '--binbdir' not in makeroptions:
      makeroptions += [ '--binbdir=' + os.path.join( makefileRelativeMainPath, 'bin' ) ]
    if '--libbdir' not in makeroptions:
      makeroptions += [ '--libbdir=' + os.path.join( makefileRelativeMainPath, 'lib' ) ]
    if '--incbdir' not in makeroptions:
      if target: 
        makeroptions.append( '--incbdir=' + os.path.join( makefileRelativeMainPath, 'include', target ) )
      else:
        makeroptions.append( '--incbdir=' + os.path.join( makefileRelativeMainPath, 'include' ) )
    else:
      if target:
        i = makeroptions.index( '--incbdir' ) + 1
        makeroptions[ i ] = os.path.join( makeroptions[ i ], target )

    makeroptions += [ '-p', vpath,
                      '-o',  makefile, relfile ]
    # create Makefile
    if maker is None:
      command = 'python ' + makerexec2 + ' ' + string.join( makeroptions )
      if debug:
            print '++ ' + command
      status=systemChecked(command)
      if status:
        raise OSError( status, makerexec + ' failed for command '\
                       + command )
    else:
      makeroptions.insert( 0, 'maker' )
      #print 'maker.execute(', makeroptions, ')'
      if debug:
            print '++ call maker:', makeroptions
      proj = maker.execute( makeroptions )
      if proj and proj.template() == maker.Project.sub:
        # prune disabled subdirs
        if proj.hasVariable( 'SUBDIRS' ):
          subdirs = map( lambda x: x.name(), proj.variable( 'SUBDIRS' ) )
        else:
          subdirs = []
        if proj.hasVariable( 'PSUBDIRS' ):
          subdirs += map( lambda x: x.name(), proj.variable( 'PSUBDIRS' ) )
        dirs = map( lambda x: os.path.join( relpath, x ), subdirs )
    hold_project = 1
  elif file == 'Makefile':
    print source_file
    hold_makefile = 1
  if hold_makefile and not hold_project:
    # create build tree
    if relpath and not os.path.isdir( relpath ):
      os.makedirs( relpath )
    shutil.copyfile( os.path.join( source_path, 'Makefile' ),
                     os.path.join( relpath, 'Makefile' ) )

  notex = filter( lambda x: not os.path.isdir( os.path.join( vpath, x ) ),
                  dirs )
  if notex:
    print 'the following sub-directories cited in', source_file, \
    'are not existing:', notex
  stack += dirs
